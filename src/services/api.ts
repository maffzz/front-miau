/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AuthRequest
 */
export interface AuthRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthRequest
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthRequest
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface AuthResponse
 */
export interface AuthResponse {
    /**
     * 
     * @type {string}
     * @memberof AuthResponse
     */
    'token'?: string;
}
/**
 * 
 * @export
 * @interface CreateGatito
 */
export interface CreateGatito {
    /**
     * 
     * @type {string}
     * @memberof CreateGatito
     */
    'nombre': string;
    /**
     * 
     * @type {number}
     * @memberof CreateGatito
     */
    'anioNacimiento': number;
    /**
     * 
     * @type {string}
     * @memberof CreateGatito
     */
    'color': CreateGatitoColorEnum;
    /**
     * 
     * @type {number}
     * @memberof CreateGatito
     */
    'duenio': number;
}

export const CreateGatitoColorEnum = {
    Blanco: 'blanco',
    Negro: 'negro',
    Marron: 'marron',
    Gris: 'gris',
    Naranja: 'naranja',
    Manchas: 'manchas'
} as const;

export type CreateGatitoColorEnum = typeof CreateGatitoColorEnum[keyof typeof CreateGatitoColorEnum];

/**
 * 
 * @export
 * @interface CreateUsuario
 */
export interface CreateUsuario {
    /**
     * 
     * @type {string}
     * @memberof CreateUsuario
     */
    'nombre': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUsuario
     */
    'correo': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUsuario
     */
    'contrasenia': string;
}
/**
 * 
 * @export
 * @interface Gatito
 */
export interface Gatito {
    /**
     * 
     * @type {number}
     * @memberof Gatito
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Gatito
     */
    'nombre'?: string;
    /**
     * 
     * @type {number}
     * @memberof Gatito
     */
    'anioNacimiento'?: number;
    /**
     * 
     * @type {string}
     * @memberof Gatito
     */
    'color'?: GatitoColorEnum;
    /**
     * 
     * @type {Usuario}
     * @memberof Gatito
     */
    'duenio'?: Usuario;
}

export const GatitoColorEnum = {
    Blanco: 'blanco',
    Negro: 'negro',
    Marron: 'marron',
    Gris: 'gris',
    Naranja: 'naranja',
    Manchas: 'manchas'
} as const;

export type GatitoColorEnum = typeof GatitoColorEnum[keyof typeof GatitoColorEnum];

/**
 * 
 * @export
 * @interface GrantedAuthority
 */
export interface GrantedAuthority {
    /**
     * 
     * @type {string}
     * @memberof GrantedAuthority
     */
    'authority'?: string;
}
/**
 * 
 * @export
 * @interface ResponseGatito
 */
export interface ResponseGatito {
    /**
     * 
     * @type {number}
     * @memberof ResponseGatito
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ResponseGatito
     */
    'nombre'?: string;
    /**
     * 
     * @type {number}
     * @memberof ResponseGatito
     */
    'anioNacimiento'?: number;
    /**
     * 
     * @type {string}
     * @memberof ResponseGatito
     */
    'color'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseGatito
     */
    'nombreDuenio'?: string;
}
/**
 * 
 * @export
 * @interface ResponseUsuario
 */
export interface ResponseUsuario {
    /**
     * 
     * @type {number}
     * @memberof ResponseUsuario
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ResponseUsuario
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseUsuario
     */
    'fechaRegistro'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ResponseUsuario
     */
    'nombresGatitos'?: Array<string>;
}
/**
 * 
 * @export
 * @interface UpdateGatitoDuenio
 */
export interface UpdateGatitoDuenio {
    /**
     * 
     * @type {number}
     * @memberof UpdateGatitoDuenio
     */
    'duenio': number;
}
/**
 * 
 * @export
 * @interface UpdateGatitoNombre
 */
export interface UpdateGatitoNombre {
    /**
     * 
     * @type {string}
     * @memberof UpdateGatitoNombre
     */
    'nombre': string;
}
/**
 * 
 * @export
 * @interface UpdateUsuarioNombre
 */
export interface UpdateUsuarioNombre {
    /**
     * 
     * @type {string}
     * @memberof UpdateUsuarioNombre
     */
    'nombre': string;
}
/**
 * 
 * @export
 * @interface Usuario
 */
export interface Usuario {
    /**
     * 
     * @type {number}
     * @memberof Usuario
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Usuario
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof Usuario
     */
    'role'?: UsuarioRoleEnum;
    /**
     * 
     * @type {string}
     * @memberof Usuario
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof Usuario
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof Usuario
     */
    'fechaRegistro'?: string;
    /**
     * 
     * @type {Array<Gatito>}
     * @memberof Usuario
     */
    'gatitos'?: Array<Gatito>;
    /**
     * 
     * @type {boolean}
     * @memberof Usuario
     */
    'locked'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Usuario
     */
    'enabled'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Usuario
     */
    'credentialsExpired'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Usuario
     */
    'expired'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Usuario
     */
    'enable'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Usuario
     */
    'credentialsNonExpired'?: boolean;
    /**
     * 
     * @type {Array<GrantedAuthority>}
     * @memberof Usuario
     */
    'authorities'?: Array<GrantedAuthority>;
    /**
     * 
     * @type {string}
     * @memberof Usuario
     */
    'username'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Usuario
     */
    'accountNonExpired'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Usuario
     */
    'accountNonLocked'?: boolean;
}

export const UsuarioRoleEnum = {
    Admin: 'ADMIN',
    User: 'USER'
} as const;

export type UsuarioRoleEnum = typeof UsuarioRoleEnum[keyof typeof UsuarioRoleEnum];


/**
 * AuthenticationControllerApi - axios parameter creator
 * @export
 */
export const AuthenticationControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AuthRequest} authRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (authRequest: AuthRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authRequest' is not null or undefined
            assertParamExists('login', 'authRequest', authRequest)
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Usuario} usuario 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register: async (usuario: Usuario, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'usuario' is not null or undefined
            assertParamExists('register', 'usuario', usuario)
            const localVarPath = `/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usuario, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationControllerApi - functional programming interface
 * @export
 */
export const AuthenticationControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {AuthRequest} authRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(authRequest: AuthRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(authRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationControllerApi.login']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {Usuario} usuario 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async register(usuario: Usuario, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.register(usuario, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationControllerApi.register']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthenticationControllerApi - factory interface
 * @export
 */
export const AuthenticationControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {AuthRequest} authRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(authRequest: AuthRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthResponse> {
            return localVarFp.login(authRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Usuario} usuario 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(usuario: Usuario, options?: RawAxiosRequestConfig): AxiosPromise<AuthResponse> {
            return localVarFp.register(usuario, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthenticationControllerApi - object-oriented interface
 * @export
 * @class AuthenticationControllerApi
 * @extends {BaseAPI}
 */
export class AuthenticationControllerApi extends BaseAPI {
    /**
     * 
     * @param {AuthRequest} authRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationControllerApi
     */
    public login(authRequest: AuthRequest, options?: RawAxiosRequestConfig) {
        return AuthenticationControllerApiFp(this.configuration).login(authRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Usuario} usuario 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationControllerApi
     */
    public register(usuario: Usuario, options?: RawAxiosRequestConfig) {
        return AuthenticationControllerApiFp(this.configuration).register(usuario, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * GatitoControllerApi - axios parameter creator
 * @export
 */
export const GatitoControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateGatito} createGatito 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGatito: async (createGatito: CreateGatito, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createGatito' is not null or undefined
            assertParamExists('createGatito', 'createGatito', createGatito)
            const localVarPath = `/gatito/crear`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createGatito, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGatito: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteGatito', 'id', id)
            const localVarPath = `/gatito/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByDuenioID: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getByDuenioID', 'id', id)
            const localVarPath = `/gatito/duenio/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} anio 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGatitoByAnioNacimiento: async (anio: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'anio' is not null or undefined
            assertParamExists('getGatitoByAnioNacimiento', 'anio', anio)
            const localVarPath = `/gatito/anio/{anio}`
                .replace(`{${"anio"}}`, encodeURIComponent(String(anio)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GetGatitoByColorColorEnum} color 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGatitoByColor: async (color: GetGatitoByColorColorEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'color' is not null or undefined
            assertParamExists('getGatitoByColor', 'color', color)
            const localVarPath = `/gatito/color/{color}`
                .replace(`{${"color"}}`, encodeURIComponent(String(color)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGatitoById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getGatitoById', 'id', id)
            const localVarPath = `/gatito/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} nombre 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGatitoByNombre: async (nombre: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'nombre' is not null or undefined
            assertParamExists('getGatitoByNombre', 'nombre', nombre)
            const localVarPath = `/gatito/nombre/{nombre}`
                .replace(`{${"nombre"}}`, encodeURIComponent(String(nombre)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGatitos: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/gatito/todos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateGatitoDuenio} updateGatitoDuenio 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGatitoDuenio: async (id: number, updateGatitoDuenio: UpdateGatitoDuenio, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateGatitoDuenio', 'id', id)
            // verify required parameter 'updateGatitoDuenio' is not null or undefined
            assertParamExists('updateGatitoDuenio', 'updateGatitoDuenio', updateGatitoDuenio)
            const localVarPath = `/gatito/{id}/updateduenio`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateGatitoDuenio, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateGatitoNombre} updateGatitoNombre 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGatitoNombre: async (id: number, updateGatitoNombre: UpdateGatitoNombre, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateGatitoNombre', 'id', id)
            // verify required parameter 'updateGatitoNombre' is not null or undefined
            assertParamExists('updateGatitoNombre', 'updateGatitoNombre', updateGatitoNombre)
            const localVarPath = `/gatito/{id}/updatenom`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateGatitoNombre, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GatitoControllerApi - functional programming interface
 * @export
 */
export const GatitoControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GatitoControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateGatito} createGatito 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGatito(createGatito: CreateGatito, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseGatito>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createGatito(createGatito, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GatitoControllerApi.createGatito']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGatito(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteGatito(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GatitoControllerApi.deleteGatito']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByDuenioID(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ResponseGatito>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByDuenioID(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GatitoControllerApi.getByDuenioID']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} anio 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGatitoByAnioNacimiento(anio: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ResponseGatito>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGatitoByAnioNacimiento(anio, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GatitoControllerApi.getGatitoByAnioNacimiento']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {GetGatitoByColorColorEnum} color 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGatitoByColor(color: GetGatitoByColorColorEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ResponseGatito>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGatitoByColor(color, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GatitoControllerApi.getGatitoByColor']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGatitoById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseGatito>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGatitoById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GatitoControllerApi.getGatitoById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} nombre 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGatitoByNombre(nombre: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ResponseGatito>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGatitoByNombre(nombre, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GatitoControllerApi.getGatitoByNombre']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGatitos(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ResponseGatito>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGatitos(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GatitoControllerApi.getGatitos']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateGatitoDuenio} updateGatitoDuenio 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateGatitoDuenio(id: number, updateGatitoDuenio: UpdateGatitoDuenio, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseGatito>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateGatitoDuenio(id, updateGatitoDuenio, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GatitoControllerApi.updateGatitoDuenio']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateGatitoNombre} updateGatitoNombre 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateGatitoNombre(id: number, updateGatitoNombre: UpdateGatitoNombre, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseGatito>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateGatitoNombre(id, updateGatitoNombre, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GatitoControllerApi.updateGatitoNombre']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * GatitoControllerApi - factory interface
 * @export
 */
export const GatitoControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GatitoControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateGatito} createGatito 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGatito(createGatito: CreateGatito, options?: RawAxiosRequestConfig): AxiosPromise<ResponseGatito> {
            return localVarFp.createGatito(createGatito, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGatito(id: number, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.deleteGatito(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByDuenioID(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<ResponseGatito>> {
            return localVarFp.getByDuenioID(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} anio 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGatitoByAnioNacimiento(anio: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<ResponseGatito>> {
            return localVarFp.getGatitoByAnioNacimiento(anio, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GetGatitoByColorColorEnum} color 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGatitoByColor(color: GetGatitoByColorColorEnum, options?: RawAxiosRequestConfig): AxiosPromise<Array<ResponseGatito>> {
            return localVarFp.getGatitoByColor(color, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGatitoById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ResponseGatito> {
            return localVarFp.getGatitoById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} nombre 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGatitoByNombre(nombre: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<ResponseGatito>> {
            return localVarFp.getGatitoByNombre(nombre, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGatitos(options?: RawAxiosRequestConfig): AxiosPromise<Array<ResponseGatito>> {
            return localVarFp.getGatitos(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateGatitoDuenio} updateGatitoDuenio 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGatitoDuenio(id: number, updateGatitoDuenio: UpdateGatitoDuenio, options?: RawAxiosRequestConfig): AxiosPromise<ResponseGatito> {
            return localVarFp.updateGatitoDuenio(id, updateGatitoDuenio, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateGatitoNombre} updateGatitoNombre 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGatitoNombre(id: number, updateGatitoNombre: UpdateGatitoNombre, options?: RawAxiosRequestConfig): AxiosPromise<ResponseGatito> {
            return localVarFp.updateGatitoNombre(id, updateGatitoNombre, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GatitoControllerApi - object-oriented interface
 * @export
 * @class GatitoControllerApi
 * @extends {BaseAPI}
 */
export class GatitoControllerApi extends BaseAPI {
    /**
     * 
     * @param {CreateGatito} createGatito 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GatitoControllerApi
     */
    public createGatito(createGatito: CreateGatito, options?: RawAxiosRequestConfig) {
        return GatitoControllerApiFp(this.configuration).createGatito(createGatito, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GatitoControllerApi
     */
    public deleteGatito(id: number, options?: RawAxiosRequestConfig) {
        return GatitoControllerApiFp(this.configuration).deleteGatito(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GatitoControllerApi
     */
    public getByDuenioID(id: number, options?: RawAxiosRequestConfig) {
        return GatitoControllerApiFp(this.configuration).getByDuenioID(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} anio 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GatitoControllerApi
     */
    public getGatitoByAnioNacimiento(anio: number, options?: RawAxiosRequestConfig) {
        return GatitoControllerApiFp(this.configuration).getGatitoByAnioNacimiento(anio, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GetGatitoByColorColorEnum} color 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GatitoControllerApi
     */
    public getGatitoByColor(color: GetGatitoByColorColorEnum, options?: RawAxiosRequestConfig) {
        return GatitoControllerApiFp(this.configuration).getGatitoByColor(color, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GatitoControllerApi
     */
    public getGatitoById(id: number, options?: RawAxiosRequestConfig) {
        return GatitoControllerApiFp(this.configuration).getGatitoById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} nombre 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GatitoControllerApi
     */
    public getGatitoByNombre(nombre: string, options?: RawAxiosRequestConfig) {
        return GatitoControllerApiFp(this.configuration).getGatitoByNombre(nombre, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GatitoControllerApi
     */
    public getGatitos(options?: RawAxiosRequestConfig) {
        return GatitoControllerApiFp(this.configuration).getGatitos(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UpdateGatitoDuenio} updateGatitoDuenio 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GatitoControllerApi
     */
    public updateGatitoDuenio(id: number, updateGatitoDuenio: UpdateGatitoDuenio, options?: RawAxiosRequestConfig) {
        return GatitoControllerApiFp(this.configuration).updateGatitoDuenio(id, updateGatitoDuenio, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UpdateGatitoNombre} updateGatitoNombre 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GatitoControllerApi
     */
    public updateGatitoNombre(id: number, updateGatitoNombre: UpdateGatitoNombre, options?: RawAxiosRequestConfig) {
        return GatitoControllerApiFp(this.configuration).updateGatitoNombre(id, updateGatitoNombre, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetGatitoByColorColorEnum = {
    Blanco: 'blanco',
    Negro: 'negro',
    Marron: 'marron',
    Gris: 'gris',
    Naranja: 'naranja',
    Manchas: 'manchas'
} as const;
export type GetGatitoByColorColorEnum = typeof GetGatitoByColorColorEnum[keyof typeof GetGatitoByColorColorEnum];


/**
 * UsuarioControllerApi - axios parameter creator
 * @export
 */
export const UsuarioControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateUsuario} createUsuario 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsuario: async (createUsuario: CreateUsuario, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createUsuario' is not null or undefined
            assertParamExists('createUsuario', 'createUsuario', createUsuario)
            const localVarPath = `/usuario/crear`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUsuario, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsuario: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteUsuario', 'id', id)
            const localVarPath = `/usuario/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} fechaRegistro 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsuarioByFechaRegistro: async (fechaRegistro: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fechaRegistro' is not null or undefined
            assertParamExists('getUsuarioByFechaRegistro', 'fechaRegistro', fechaRegistro)
            const localVarPath = `/usuario/fecharegistro/{fechaRegistro}`
                .replace(`{${"fechaRegistro"}}`, encodeURIComponent(String(fechaRegistro)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsuarioById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUsuarioById', 'id', id)
            const localVarPath = `/usuario/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} nombre 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsuarioByNombre: async (nombre: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'nombre' is not null or undefined
            assertParamExists('getUsuarioByNombre', 'nombre', nombre)
            const localVarPath = `/usuario/nombre/{nombre}`
                .replace(`{${"nombre"}}`, encodeURIComponent(String(nombre)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsuarios: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/usuario/todos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateUsuarioNombre} updateUsuarioNombre 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNombreUsuario: async (id: number, updateUsuarioNombre: UpdateUsuarioNombre, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateNombreUsuario', 'id', id)
            // verify required parameter 'updateUsuarioNombre' is not null or undefined
            assertParamExists('updateNombreUsuario', 'updateUsuarioNombre', updateUsuarioNombre)
            const localVarPath = `/usuario/{id}/updatenom`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateUsuarioNombre, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsuarioControllerApi - functional programming interface
 * @export
 */
export const UsuarioControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsuarioControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateUsuario} createUsuario 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUsuario(createUsuario: CreateUsuario, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseUsuario>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUsuario(createUsuario, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsuarioControllerApi.createUsuario']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUsuario(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUsuario(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsuarioControllerApi.deleteUsuario']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} fechaRegistro 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsuarioByFechaRegistro(fechaRegistro: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ResponseUsuario>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsuarioByFechaRegistro(fechaRegistro, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsuarioControllerApi.getUsuarioByFechaRegistro']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsuarioById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseUsuario>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsuarioById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsuarioControllerApi.getUsuarioById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} nombre 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsuarioByNombre(nombre: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ResponseUsuario>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsuarioByNombre(nombre, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsuarioControllerApi.getUsuarioByNombre']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsuarios(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ResponseUsuario>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsuarios(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsuarioControllerApi.getUsuarios']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateUsuarioNombre} updateUsuarioNombre 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateNombreUsuario(id: number, updateUsuarioNombre: UpdateUsuarioNombre, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseUsuario>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateNombreUsuario(id, updateUsuarioNombre, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsuarioControllerApi.updateNombreUsuario']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UsuarioControllerApi - factory interface
 * @export
 */
export const UsuarioControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsuarioControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateUsuario} createUsuario 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsuario(createUsuario: CreateUsuario, options?: RawAxiosRequestConfig): AxiosPromise<ResponseUsuario> {
            return localVarFp.createUsuario(createUsuario, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsuario(id: number, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.deleteUsuario(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} fechaRegistro 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsuarioByFechaRegistro(fechaRegistro: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<ResponseUsuario>> {
            return localVarFp.getUsuarioByFechaRegistro(fechaRegistro, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsuarioById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ResponseUsuario> {
            return localVarFp.getUsuarioById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} nombre 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsuarioByNombre(nombre: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<ResponseUsuario>> {
            return localVarFp.getUsuarioByNombre(nombre, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsuarios(options?: RawAxiosRequestConfig): AxiosPromise<Array<ResponseUsuario>> {
            return localVarFp.getUsuarios(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateUsuarioNombre} updateUsuarioNombre 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNombreUsuario(id: number, updateUsuarioNombre: UpdateUsuarioNombre, options?: RawAxiosRequestConfig): AxiosPromise<ResponseUsuario> {
            return localVarFp.updateNombreUsuario(id, updateUsuarioNombre, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsuarioControllerApi - object-oriented interface
 * @export
 * @class UsuarioControllerApi
 * @extends {BaseAPI}
 */
export class UsuarioControllerApi extends BaseAPI {
    /**
     * 
     * @param {CreateUsuario} createUsuario 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioControllerApi
     */
    public createUsuario(createUsuario: CreateUsuario, options?: RawAxiosRequestConfig) {
        return UsuarioControllerApiFp(this.configuration).createUsuario(createUsuario, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioControllerApi
     */
    public deleteUsuario(id: number, options?: RawAxiosRequestConfig) {
        return UsuarioControllerApiFp(this.configuration).deleteUsuario(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} fechaRegistro 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioControllerApi
     */
    public getUsuarioByFechaRegistro(fechaRegistro: string, options?: RawAxiosRequestConfig) {
        return UsuarioControllerApiFp(this.configuration).getUsuarioByFechaRegistro(fechaRegistro, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioControllerApi
     */
    public getUsuarioById(id: number, options?: RawAxiosRequestConfig) {
        return UsuarioControllerApiFp(this.configuration).getUsuarioById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} nombre 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioControllerApi
     */
    public getUsuarioByNombre(nombre: string, options?: RawAxiosRequestConfig) {
        return UsuarioControllerApiFp(this.configuration).getUsuarioByNombre(nombre, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioControllerApi
     */
    public getUsuarios(options?: RawAxiosRequestConfig) {
        return UsuarioControllerApiFp(this.configuration).getUsuarios(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UpdateUsuarioNombre} updateUsuarioNombre 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioControllerApi
     */
    public updateNombreUsuario(id: number, updateUsuarioNombre: UpdateUsuarioNombre, options?: RawAxiosRequestConfig) {
        return UsuarioControllerApiFp(this.configuration).updateNombreUsuario(id, updateUsuarioNombre, options).then((request) => request(this.axios, this.basePath));
    }
}



